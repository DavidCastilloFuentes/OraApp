package com.imagination.technologies.ora.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table LOCATIONS.
*/
public class LocationsDao extends AbstractDao<Locations, Long> {

    public static final String TABLENAME = "LOCATIONS";

    /**
     * Properties of entity Locations.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KLongitude = new Property(1, String.class, "kLongitude", false, "K_LONGITUDE");
        public final static Property KZipcode = new Property(2, String.class, "kZipcode", false, "K_ZIPCODE");
        public final static Property KZipClass = new Property(3, String.class, "kZipClass", false, "K_ZIP_CLASS");
        public final static Property KCounty = new Property(4, String.class, "kCounty", false, "K_COUNTY");
        public final static Property KCity = new Property(5, String.class, "kCity", false, "K_CITY");
        public final static Property KState = new Property(6, String.class, "kState", false, "K_STATE");
        public final static Property KLatitude = new Property(7, String.class, "kLatitude", false, "K_LATITUDE");
    };

    private DaoSession daoSession;


    public LocationsDao(DaoConfig config) {
        super(config);
    }

    public LocationsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCATIONS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'K_LONGITUDE' TEXT," + // 1: kLongitude
                "'K_ZIPCODE' TEXT," + // 2: kZipcode
                "'K_ZIP_CLASS' TEXT," + // 3: kZipClass
                "'K_COUNTY' TEXT," + // 4: kCounty
                "'K_CITY' TEXT," + // 5: kCity
                "'K_STATE' TEXT," + // 6: kState
                "'K_LATITUDE' TEXT);"); // 7: kLatitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATIONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Locations entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String kLongitude = entity.getKLongitude();
        if (kLongitude != null) {
            stmt.bindString(2, kLongitude);
        }

        String kZipcode = entity.getKZipcode();
        if (kZipcode != null) {
            stmt.bindString(3, kZipcode);
        }

        String kZipClass = entity.getKZipClass();
        if (kZipClass != null) {
            stmt.bindString(4, kZipClass);
        }

        String kCounty = entity.getKCounty();
        if (kCounty != null) {
            stmt.bindString(5, kCounty);
        }

        String kCity = entity.getKCity();
        if (kCity != null) {
            stmt.bindString(6, kCity);
        }

        String kState = entity.getKState();
        if (kState != null) {
            stmt.bindString(7, kState);
        }

        String kLatitude = entity.getKLatitude();
        if (kLatitude != null) {
            stmt.bindString(8, kLatitude);
        }
    }

    @Override
    protected void attachEntity(Locations entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Locations readEntity(Cursor cursor, int offset) {
        Locations entity = new Locations( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kLongitude
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kZipcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kZipClass
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kCounty
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kCity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kState
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // kLatitude
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Locations entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKLongitude(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKZipcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKZipClass(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKCounty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKLatitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Locations entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Locations entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
