package com.imagination.technologies.ora.app.greendao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LOCATIONS.
 */
public class Locations {

    private Long id;
    private String kLongitude;
    private String kZipcode;
    private String kZipClass;
    private String kCounty;
    private String kCity;
    private String kState;
    private String kLatitude;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocationsDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Locations() {
    }

    public Locations(Long id) {
        this.id = id;
    }

    public Locations(Long id, String kLongitude, String kZipcode, String kZipClass, String kCounty, String kCity, String kState, String kLatitude) {
        this.id = id;
        this.kLongitude = kLongitude;
        this.kZipcode = kZipcode;
        this.kZipClass = kZipClass;
        this.kCounty = kCounty;
        this.kCity = kCity;
        this.kState = kState;
        this.kLatitude = kLatitude;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getKLongitude() {
        return kLongitude;
    }

    public void setKLongitude(String kLongitude) {
        this.kLongitude = kLongitude;
    }

    public String getKZipcode() {
        return kZipcode;
    }

    public void setKZipcode(String kZipcode) {
        this.kZipcode = kZipcode;
    }

    public String getKZipClass() {
        return kZipClass;
    }

    public void setKZipClass(String kZipClass) {
        this.kZipClass = kZipClass;
    }

    public String getKCounty() {
        return kCounty;
    }

    public void setKCounty(String kCounty) {
        this.kCounty = kCounty;
    }

    public String getKCity() {
        return kCity;
    }

    public void setKCity(String kCity) {
        this.kCity = kCity;
    }

    public String getKState() {
        return kState;
    }

    public void setKState(String kState) {
        this.kState = kState;
    }

    public String getKLatitude() {
        return kLatitude;
    }

    public void setKLatitude(String kLatitude) {
        this.kLatitude = kLatitude;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
